/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as UsersImport } from './routes/users'
import { Route as ResourcesImport } from './routes/resources'
import { Route as ReservationsImport } from './routes/reservations'
import { Route as LogoutImport } from './routes/logout'
import { Route as IndexImport } from './routes/index'
import { Route as UserUserIDImport } from './routes/user.$userID'
import { Route as ResourceResourceIDImport } from './routes/resource.$resourceID'
import { Route as ReservationReservationIDImport } from './routes/reservation.$reservationID'

// Create/Update Routes

const UsersRoute = UsersImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => rootRoute,
} as any)

const ResourcesRoute = ResourcesImport.update({
  id: '/resources',
  path: '/resources',
  getParentRoute: () => rootRoute,
} as any)

const ReservationsRoute = ReservationsImport.update({
  id: '/reservations',
  path: '/reservations',
  getParentRoute: () => rootRoute,
} as any)

const LogoutRoute = LogoutImport.update({
  id: '/logout',
  path: '/logout',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const UserUserIDRoute = UserUserIDImport.update({
  id: '/user/$userID',
  path: '/user/$userID',
  getParentRoute: () => rootRoute,
} as any)

const ResourceResourceIDRoute = ResourceResourceIDImport.update({
  id: '/resource/$resourceID',
  path: '/resource/$resourceID',
  getParentRoute: () => rootRoute,
} as any)

const ReservationReservationIDRoute = ReservationReservationIDImport.update({
  id: '/reservation/$reservationID',
  path: '/reservation/$reservationID',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/logout': {
      id: '/logout'
      path: '/logout'
      fullPath: '/logout'
      preLoaderRoute: typeof LogoutImport
      parentRoute: typeof rootRoute
    }
    '/reservations': {
      id: '/reservations'
      path: '/reservations'
      fullPath: '/reservations'
      preLoaderRoute: typeof ReservationsImport
      parentRoute: typeof rootRoute
    }
    '/resources': {
      id: '/resources'
      path: '/resources'
      fullPath: '/resources'
      preLoaderRoute: typeof ResourcesImport
      parentRoute: typeof rootRoute
    }
    '/users': {
      id: '/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersImport
      parentRoute: typeof rootRoute
    }
    '/reservation/$reservationID': {
      id: '/reservation/$reservationID'
      path: '/reservation/$reservationID'
      fullPath: '/reservation/$reservationID'
      preLoaderRoute: typeof ReservationReservationIDImport
      parentRoute: typeof rootRoute
    }
    '/resource/$resourceID': {
      id: '/resource/$resourceID'
      path: '/resource/$resourceID'
      fullPath: '/resource/$resourceID'
      preLoaderRoute: typeof ResourceResourceIDImport
      parentRoute: typeof rootRoute
    }
    '/user/$userID': {
      id: '/user/$userID'
      path: '/user/$userID'
      fullPath: '/user/$userID'
      preLoaderRoute: typeof UserUserIDImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/logout': typeof LogoutRoute
  '/reservations': typeof ReservationsRoute
  '/resources': typeof ResourcesRoute
  '/users': typeof UsersRoute
  '/reservation/$reservationID': typeof ReservationReservationIDRoute
  '/resource/$resourceID': typeof ResourceResourceIDRoute
  '/user/$userID': typeof UserUserIDRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/logout': typeof LogoutRoute
  '/reservations': typeof ReservationsRoute
  '/resources': typeof ResourcesRoute
  '/users': typeof UsersRoute
  '/reservation/$reservationID': typeof ReservationReservationIDRoute
  '/resource/$resourceID': typeof ResourceResourceIDRoute
  '/user/$userID': typeof UserUserIDRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/logout': typeof LogoutRoute
  '/reservations': typeof ReservationsRoute
  '/resources': typeof ResourcesRoute
  '/users': typeof UsersRoute
  '/reservation/$reservationID': typeof ReservationReservationIDRoute
  '/resource/$resourceID': typeof ResourceResourceIDRoute
  '/user/$userID': typeof UserUserIDRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/logout'
    | '/reservations'
    | '/resources'
    | '/users'
    | '/reservation/$reservationID'
    | '/resource/$resourceID'
    | '/user/$userID'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/logout'
    | '/reservations'
    | '/resources'
    | '/users'
    | '/reservation/$reservationID'
    | '/resource/$resourceID'
    | '/user/$userID'
  id:
    | '__root__'
    | '/'
    | '/logout'
    | '/reservations'
    | '/resources'
    | '/users'
    | '/reservation/$reservationID'
    | '/resource/$resourceID'
    | '/user/$userID'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LogoutRoute: typeof LogoutRoute
  ReservationsRoute: typeof ReservationsRoute
  ResourcesRoute: typeof ResourcesRoute
  UsersRoute: typeof UsersRoute
  ReservationReservationIDRoute: typeof ReservationReservationIDRoute
  ResourceResourceIDRoute: typeof ResourceResourceIDRoute
  UserUserIDRoute: typeof UserUserIDRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LogoutRoute: LogoutRoute,
  ReservationsRoute: ReservationsRoute,
  ResourcesRoute: ResourcesRoute,
  UsersRoute: UsersRoute,
  ReservationReservationIDRoute: ReservationReservationIDRoute,
  ResourceResourceIDRoute: ResourceResourceIDRoute,
  UserUserIDRoute: UserUserIDRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/logout",
        "/reservations",
        "/resources",
        "/users",
        "/reservation/$reservationID",
        "/resource/$resourceID",
        "/user/$userID"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/logout": {
      "filePath": "logout.tsx"
    },
    "/reservations": {
      "filePath": "reservations.tsx"
    },
    "/resources": {
      "filePath": "resources.tsx"
    },
    "/users": {
      "filePath": "users.tsx"
    },
    "/reservation/$reservationID": {
      "filePath": "reservation.$reservationID.tsx"
    },
    "/resource/$resourceID": {
      "filePath": "resource.$resourceID.tsx"
    },
    "/user/$userID": {
      "filePath": "user.$userID.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
